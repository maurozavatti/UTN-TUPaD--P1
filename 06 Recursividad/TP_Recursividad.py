#TP Recursividad
"""1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
entre 1 y el n√∫mero que indique el usuario"""

def factorial(num):
    if num == 0 or num ==1:
        return 1
    else:
        return num * factorial(num-1)
    
if __name__== "__main__":
    print(factorial(4))
    
"""2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n
indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario
especifique."""

def fibonacci(pos):
    if pos == 0:
        return 0
    elif pos == 1:
        return 1
    else:
        return fibonacci(pos - 1) + fibonacci(pos - 2)
    
if __name__== "__main__":
    print(fibonacci(4))
    #en el ejemplo de 4. el resultado es 3, dado a que las dos primeras pos no se tienen en cuenta (0 y 1)
    #El c√°lculo recursivo para fibonacci(4) es:
        #fibonacci(4) = fibonacci(3) + fibonacci(2)
        #fibonacci(3) = fibonacci(2) + fibonacci(1) = 1 + 1 = 2
        #fibonacci(2) = fibonacci(1) + fibonacci(0) = 1 + 0 = 1
        #Por lo tanto, fibonacci(4) = 2 + 1 = 3

"""3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un
exponente, utilizando la f√≥rmula "ùëõ ^ ùëö = ùëõ ‚àó ùëõ ^ (ùëö‚àí1)". Prueba esta funci√≥n en un
algoritmo general."""

def potencia(num, exp):
    if exp == 0:
        return 1
    else:
        # Calculo el resultado de la llamada recursiva
        resultado_parcial = num * potencia(num, exp - 1)
        # Imprimo el paso actual
        print(f"{num} * {num}^{exp-1} = {resultado_parcial}")
        return resultado_parcial
        
if __name__== "__main__":
    print(potencia(4,5))

"""4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base
decimal y devuelva su representaci√≥n en binario como una cadena de texto"""

def convertir_a_binario(num):
    if num == 1:
        return "1"
    elif num == 0:
        return "0"
    else:
        division = num // 2
        resto = num % 2
        print(f"{num} / 2 = {division}(resto = {resto})")
        print(f"{division} % 2 = {resto}")
        return convertir_a_binario(division) + str(resto)
        
if __name__== "__main__":
    print(convertir_a_binario(10))

"""5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una
cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no
lo es.
Requisitos:
La soluci√≥n debe ser recursiva.
No se debe usar [::-1] ni la funci√≥n reversed()."""

def es_palindromo(palabra):
    # Caso base: cadena vac√≠a o de un solo car√°cter es pal√≠ndromo
    if len(palabra) <= 1:
        return True
    # Caso recursivo: comparar primer y √∫ltimo car√°cter
    if palabra[0].lower() != palabra[-1].lower():
        return False
    # Llamada recursiva con la subcadena sin los extremos
    return es_palindromo(palabra[1:-1])

if __name__== "__main__":
    print(es_palindromo("radar"))
    
"""6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un
n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
Restricciones:
No se puede convertir el n√∫mero a string.
Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
Ejemplos:
suma_digitos(1234) ‚Üí 10 (1 + 2 + 3 + 4)
suma_digitos(9) ‚Üí 9
suma_digitos(305) ‚Üí 8 (3 + 0 + 5)
"""

def suma_digitos(n):
    if n < 0:
        return f"El numero tiene que ser postivo"
    elif n == 0:
        return 0
    else:
        #Cuando usamos n % 10, obtenemos el √∫ltimo d√≠gito del n√∫mero ( n ) en base decimal
        digito = n % 10
        resto = n // 10
        print(f"D√≠gito: {digito}, Resto del n√∫mero: {resto}")
        return digito + suma_digitos(resto)

if __name__== "__main__":
    print(suma_digitos(2121))
    
"""7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n
bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al
√∫ltimo nivel con un solo bloque.
Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el
nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la
pir√°mide.
Ejemplos:
contar_bloques(1) ‚Üí 1
(1)
contar_bloques(2) ‚Üí 3
(2 + 1)
contar_bloques(4) ‚Üí 10
(4 + 3 + 2 + 1)"""

def contar_digito(numero, digito):
    # Caso base: si el n√∫mero es 0, no hay m√°s d√≠gitos que contar
    if numero == 0:
        return 0
    # Obtener el √∫ltimo d√≠gito
    ultimo_digito = numero % 10
    # Contar si el √∫ltimo d√≠gito coincide con el d√≠gito buscado (1 si coincide, 0 si no)
    contador = 1 if ultimo_digito == digito else 0
    # Llamada recursiva con el n√∫mero sin el √∫ltimo d√≠gito
    return contador + contar_digito(numero // 10, digito)
    #Dividimos numero entre 10 (numero // 10) para eliminar el √∫ltimo d√≠gito y llamamos recursivamente a la funci√≥n.

if __name__=="__main__":
    print(contar_digito(123123123123, 3))
